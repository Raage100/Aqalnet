// <auto-generated />
using System;
using System.Collections.Generic;
using Aqalnet.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Aqalnet.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240413205433_Inital")]
    partial class Inital
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Aqalnet.Domain.Cities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("country_id");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Aqalnet.Domain.Cities.City.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");
                        });

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_cities_country_id");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("Aqalnet.Domain.Countries.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Aqalnet.Domain.Countries.Country.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");
                        });

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("Aqalnet.Domain.Propertys.Apartment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_id");

                    b.ComplexProperty<Dictionary<string, object>>("Floor", "Aqalnet.Domain.Propertys.Apartment.Floor#Floor", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("floor");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("HasBalcony", "Aqalnet.Domain.Propertys.Apartment.HasBalcony#HasBalcony", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("has_balcony");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("HasElevator", "Aqalnet.Domain.Propertys.Apartment.HasElevator#HasElevator", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("has_elevator");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("HasParking", "Aqalnet.Domain.Propertys.Apartment.HasParking#HasParking", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("has_parking");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("NumberOfRooms", "Aqalnet.Domain.Propertys.Apartment.NumberOfRooms#NumberOfRooms", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("number_of_rooms");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("NumberOfToilets", "Aqalnet.Domain.Propertys.Apartment.NumberOfToilets#NumberOfToilets", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("number_of_toilets");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("YearBuilt", "Aqalnet.Domain.Propertys.Apartment.YearBuilt#YearBuilt", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateOnly>("Value")
                                .HasColumnType("date")
                                .HasColumnName("year_built");
                        });

                    b.HasKey("Id")
                        .HasName("pk_apartments");

                    b.HasIndex("PropertyId")
                        .IsUnique()
                        .HasDatabaseName("ix_apartments_property_id");

                    b.ToTable("apartments", (string)null);
                });

            modelBuilder.Entity("Aqalnet.Domain.Propertys.House", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_id");

                    b.ComplexProperty<Dictionary<string, object>>("HasGarage", "Aqalnet.Domain.Propertys.House.HasGarage#HasGarage", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("has_garage");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("HasParking", "Aqalnet.Domain.Propertys.House.HasParking#HasParking", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("has_parking");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("NumberOfFloors", "Aqalnet.Domain.Propertys.House.NumberOfFloors#NumberOfFloors", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("number_of_floors");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("NumberOfRooms", "Aqalnet.Domain.Propertys.House.NumberOfRooms#NumberOfRooms", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("number_of_rooms");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("NumberOfToilets", "Aqalnet.Domain.Propertys.House.NumberOfToilets#NumberOfToilets", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("number_of_toilets");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("YearBuilt", "Aqalnet.Domain.Propertys.House.YearBuilt#YearBuilt", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateOnly>("Value")
                                .HasColumnType("date")
                                .HasColumnName("year_built");
                        });

                    b.HasKey("Id")
                        .HasName("pk_houses");

                    b.HasIndex("PropertyId")
                        .IsUnique()
                        .HasDatabaseName("ix_houses_property_id");

                    b.ToTable("houses", (string)null);
                });

            modelBuilder.Entity("Aqalnet.Domain.Propertys.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_id");

                    b.ComplexProperty<Dictionary<string, object>>("Alt", "Aqalnet.Domain.Propertys.Image.Alt#Alt", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("alt");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Description", "Aqalnet.Domain.Propertys.Image.Description#Description", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("description");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "Aqalnet.Domain.Propertys.Image.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("title");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Url", "Aqalnet.Domain.Propertys.Image.Url#Url", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("url");
                        });

                    b.HasKey("Id")
                        .HasName("pk_images");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("ix_images_property_id");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("Aqalnet.Domain.Propertys.Land", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_id");

                    b.ComplexProperty<Dictionary<string, object>>("Latitude", "Aqalnet.Domain.Propertys.Land.Latitude#Latitude", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Value")
                                .HasPrecision(10, 7)
                                .HasColumnType("numeric(10,7)")
                                .HasColumnName("latitude");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Longitude", "Aqalnet.Domain.Propertys.Land.Longitude#Longitude", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Value")
                                .HasPrecision(10, 7)
                                .HasColumnType("numeric(10,7)")
                                .HasColumnName("longitude");
                        });

                    b.HasKey("Id")
                        .HasName("pk_lands");

                    b.HasIndex("PropertyId")
                        .IsUnique()
                        .HasDatabaseName("ix_lands_property_id");

                    b.ToTable("lands", (string)null);
                });

            modelBuilder.Entity("Aqalnet.Domain.Propertys.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid")
                        .HasColumnName("city_id");

                    b.Property<int>("PropertyType")
                        .HasColumnType("integer")
                        .HasColumnName("property_type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.ComplexProperty<Dictionary<string, object>>("About", "Aqalnet.Domain.Propertys.Property.About#About", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("about");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Address", "Aqalnet.Domain.Propertys.Property.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("street");

                            b1.Property<int>("StreetNumber")
                                .HasColumnType("integer")
                                .HasColumnName("street_number");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Area", "Aqalnet.Domain.Propertys.Property.Area#Area", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Value")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("area");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("DatePublished", "Aqalnet.Domain.Propertys.Property.DatePublished#DatePublished", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateOnly>("Value")
                                .HasColumnType("date")
                                .HasColumnName("date_published");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("IsPublished", "Aqalnet.Domain.Propertys.Property.IsPublished#IsPublished", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("is_published");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Price", "Aqalnet.Domain.Propertys.Property.Price#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("price");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("currency");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PricePerSquareMeter", "Aqalnet.Domain.Propertys.Property.PricePerSquareMeter#PricePerSquareMeter", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Value")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("price_per_square_meter");
                        });

                    b.HasKey("Id")
                        .HasName("pk_properties");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_properties_city_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_properties_user_id");

                    b.ToTable("properties", (string)null);
                });

            modelBuilder.Entity("Aqalnet.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.ComplexProperty<Dictionary<string, object>>("CreatedAt", "Aqalnet.Domain.Users.User.CreatedAt#CreatedAt", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateOnly>("Value")
                                .HasColumnType("date")
                                .HasColumnName("created_at");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Email", "Aqalnet.Domain.Users.User.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("FirstName", "Aqalnet.Domain.Users.User.FirstName#FirstName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("first_name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("LastName", "Aqalnet.Domain.Users.User.LastName#LastName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("last_name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("MobileNumber", "Aqalnet.Domain.Users.User.MobileNumber#MobileNumber", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("mobile_number");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Oid", "Aqalnet.Domain.Users.User.Oid#Oid", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("oid");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ProfilePicture", "Aqalnet.Domain.Users.User.ProfilePicture#ProfilePicture", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("profile_picture_url");
                        });

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Aqalnet.Domain.Cities.City", b =>
                {
                    b.HasOne("Aqalnet.Domain.Countries.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cities_country_country_id");
                });

            modelBuilder.Entity("Aqalnet.Domain.Propertys.Apartment", b =>
                {
                    b.HasOne("Aqalnet.Domain.Propertys.Property", "Property")
                        .WithOne("Apartment")
                        .HasForeignKey("Aqalnet.Domain.Propertys.Apartment", "PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_apartments_property_property_id");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Aqalnet.Domain.Propertys.House", b =>
                {
                    b.HasOne("Aqalnet.Domain.Propertys.Property", "Property")
                        .WithOne("House")
                        .HasForeignKey("Aqalnet.Domain.Propertys.House", "PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_houses_property_property_id");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Aqalnet.Domain.Propertys.Image", b =>
                {
                    b.HasOne("Aqalnet.Domain.Propertys.Property", null)
                        .WithMany("_images")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_images_properties_property_id");
                });

            modelBuilder.Entity("Aqalnet.Domain.Propertys.Land", b =>
                {
                    b.HasOne("Aqalnet.Domain.Propertys.Property", "Property")
                        .WithOne("Land")
                        .HasForeignKey("Aqalnet.Domain.Propertys.Land", "PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lands_property_property_id");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Aqalnet.Domain.Propertys.Property", b =>
                {
                    b.HasOne("Aqalnet.Domain.Cities.City", null)
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_properties_cities_city_id");

                    b.HasOne("Aqalnet.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_properties_user_user_id");
                });

            modelBuilder.Entity("Aqalnet.Domain.Propertys.Property", b =>
                {
                    b.Navigation("Apartment");

                    b.Navigation("House");

                    b.Navigation("Land");

                    b.Navigation("_images");
                });
#pragma warning restore 612, 618
        }
    }
}
